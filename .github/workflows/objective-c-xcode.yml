name: Generate Audio Files

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-generate:
    runs-on: macos-latest

    steps:
      # Clone the repository
      - name: Clone repository
        run: |
          echo "Cloning repository at $(date)"
          git clone https://github.com/encryptedcoderr/AppleTest/
          echo "Repository cloned at $(date)"

      # Navigate and list directory contents
      - name: Navigate and list directory contents
        run: |
          echo "Navigating to directory at $(date)"
          cd AppleTest/apple-positional-audio-codec-invalid-header-main
          echo "Listing directory contents at $(date)"
          ls -l
          echo "Directory listing completed at $(date)"

      # Copy poc_variation3.mm to the working directory
      - name: Ensure poc_variation3.mm exists
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Copying or verifying poc_variation3.mm at $(date)"
          if [ ! -f "poc_variation3.mm" ]; then
            echo "Error: poc_variation3.mm not found"
            ls -l
            exit 1
          fi
          echo "poc_variation3.mm found"
          ls -l poc_variation3.mm
          echo "File verification completed at $(date)"

      # Log Xcode setup start
      - name: Log Xcode setup start
        run: |
          echo "Setting up Xcode at $(date)"

      # Set up specific Xcode version
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1' # Use Xcode 16.1, compatible with iPhoneOS SDK

      # Log Xcode setup completion
      - name: Log Xcode setup completion
        run: |
          echo "Xcode setup completed at $(date)"

      # Verify Xcode and clang version
      - name: Verify Xcode and clang version
        run: |
          echo "Verifying Xcode and clang versions at $(date)"
          xcodebuild -version
          clang++ --version
          xcrun --sdk iphoneos --show-sdk-path
          echo "Verification completed at $(date)"

      # Check system resources
      - name: Check system resources
        run: |
          echo "Checking system resources at $(date)"
          df -h
          system_profiler SPHardwareDataType
          echo "System resource check completed at $(date)"

      # Compile poc_variation3.mm for iPhoneOS
      - name: Compile poc_variation3.mm
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Preparing to compile poc_variation3.mm at $(date)"
          clang++ -fobjc-arc -arch arm64 -isysroot $(xcrun --sdk iphoneos --show-sdk-path) -framework AVFAudio -framework AudioToolbox -std=c++11 poc_variation3.mm -o poc_variation3
          if [ $? -eq 0 ]; then
            echo "Compilation successful at $(date)"
            echo "Listing compiled binary at $(date)"
            ls -l poc_variation3 || echo "Compiled binary 'poc_variation3' not found"
            BINARY_SIZE=$(stat -f %z poc_variation3 2>/dev/null || stat -c %s poc_variation3 2>/dev/null)
            echo "Binary size: $BINARY_SIZE bytes"
          else
            echo "Compilation failed at $(date)"
            exit 1
          fi

      # Run poc_variation3 to generate output_<sampleRate>_<formatID>.mp4 files
      - name: Run poc_variation3
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Running poc_variation3 at $(date)"
          chmod +x poc_variation3
          ./poc_variation3
          if [ $? -eq 0 ]; then
            echo "poc_variation3 executed successfully at $(date)"
          else
            echo "poc_variation3 execution failed at $(date)"
            exit 1
          fi

      # Install FFmpeg for conversion and ffprobe
      - name: Install FFmpeg
        run: |
          echo "Installing FFmpeg at $(date)"
          brew install ffmpeg
          echo "FFmpeg installed at $(date)"

      # Convert generated MP4 files to MP3
      - name: Convert MP4 to MP3
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Converting MP4 files to MP3 at $(date)"
          for file in output_*.mp4; do
            if [ -f "$file" ]; then
              output_mp3="${file%.mp4}.mp3"
              ffmpeg -i "$file" -c:a mp3 -b:a 128k -ac 1 "$output_mp3"
              if [ $? -eq 0 ]; then
                echo "Converted $file to $output_mp3 successfully"
              else
                echo "Conversion failed for $file"
                exit 1
              fi
            else
              echo "No MP4 files found"
              exit 1
            fi
          done
          echo "Conversion completed at $(date)"

      # Verify generated files
      - name: Verify generated files
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Checking for generated files at $(date)"
          ls -lh output_*.mp4 output_*.mp3 || echo "One or more output files not found at $(date)"
          for file in output_*.mp4; do
            if [ -f "$file" ]; then
              FILE_SIZE=$(stat -f %z "$file" 2>/dev/null || stat -c %s "$file" 2>/dev/null)
              echo "$file size: $FILE_SIZE bytes"
              if [ "$FILE_SIZE" -eq 0 ]; then
                echo "Error: $file is 0 bytes"
                exit 1
              fi
              ffprobe -i "$file" -show_format -show_streams -print_format json || echo "ffprobe failed for $file"
            else
              echo "No MP4 files found"
              exit 1
            fi
          done
          for file in output_*.mp3; do
            if [ -f "$file" ]; then
              FILE_SIZE=$(stat -f %z "$file" 2>/dev/null || stat -c %s "$file" 2>/dev/null)
              echo "$file size: $FILE_SIZE bytes"
              if [ "$FILE_SIZE" -eq 0 ]; then
                echo "Error: $file is 0 bytes"
                exit 1
              fi
              ffprobe -i "$file" -show_format -show_streams -print_format json || echo "ffprobe failed for $file"
            fi
          done
          echo "File verification completed at $(date)"

      # Log artifact upload start
      - name: Log artifact upload start
        run: |
          echo "Uploading artifacts at $(date)"

      # Upload MP4 and MP3 files as artifacts
      - name: Upload audio artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audio-files
          path: |
            AppleTest/apple-positional-audio-codec-invalid-header-main/output_*.mp4
            AppleTest/apple-positional-audio-codec-invalid-header-main/output_*.mp3
          retention-days: 7
          if-no-files-found: error

      # Log artifact upload completion
      - name: Log artifact upload completion
        run: |
          echo "Artifact upload completed at $(date)"
