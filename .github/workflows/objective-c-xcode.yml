name: Generate and Fuzz Audio Files

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-generate:
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
      - name: Clone repository
        run: |
          echo "Cloning repository at $(date)"
          git clone https://github.com/encryptedcoderr/AppleTest/
          cd AppleTest/apple-positional-audio-codec-invalid-header-main
          echo "Listing directory contents at $(date)"
          ls -l
          echo "Repository cloned and directory listed at $(date)"

      - name: Patch encodeme.mm
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching encodeme.mm at $(date)"
          cat > encodeme.mm << EOF
          # ... [Your existing encodeme.mm code] ...
          EOF
          echo "encodeme.mm patched at $(date)"

      - name: Patch fuzzer.mm
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching fuzzer.mm at $(date)"
          cat > fuzzer.mm << 'EOF'
          # ... [Your existing fuzzer.mm code] ...
          EOF
          echo "fuzzer.mm patched at $(date)"

      - name: Cache FFmpeg
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/ffmpeg
          key: ffmpeg-${{ runner.os }}-2025-06
          restore-keys: ffmpeg-${{ runner.os }}-

      - name: Install FFmpeg
        run: |
          echo "Installing FFmpeg at $(date)"
          if ! command -v ffmpeg &> /dev/null; then
            brew install ffmpeg
          else
            echo "FFmpeg already installed"
            ffmpeg -version
          fi
          echo "FFmpeg installed at $(date)"

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Verify Xcode and clang version
        run: |
          echo "Verifying Xcode and clang versions at $(date)"
          xcodebuild -version
          clang++ --version
          xcrun --sdk macosx --show-sdk-path
          echo "Verification completed at $(date)"

      - name: Check system resources
        run: |
          echo "Checking system resources at $(date)"
          df -h
          system_profiler SPHardwareDataType
          echo "System resource check completed at $(date)"

      - name: Verify source files
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Verifying files at $(date)"
          for file in encodeme.mm fuzzer.mm; do
            if [ -f "$file" ] && [ -r "$file" ]; then
              echo "$file found and readable"
              ls -l "$file"
            else
              echo "Error: $file not found or not readable"
              ls -l
              exit 1
            fi
          done
          echo "File verification completed at $(date)"

      - name: Compile encodeme
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling encodeme.mm at $(date)"
          clang++ -g -Os -std=c++2b -fmodules -fcxx-modules -fobjc-arc -arch arm64 -isysroot $(xcrun --sdk macosx --show-sdk-path) -framework AVFAudio -framework AudioToolbox encodeme.mm -o encodeme
          if [ $? -eq 0 ]; then
            echo "Compilation completed successfully"
            ls -l encodeme || echo "Compiled binary 'encodeme' not found"
            BINARY_SIZE=$(stat -f %z encodeme 2>/dev/null || stat -c %s encodeme 2>/dev/null)
            echo "Binary size: $BINARY_SIZE bytes"
          else
            echo "Compilation failed"
            exit 1
          fi

      - name: Compile fuzzer
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling fuzzer.mm at $(date)"
          clang++ -g -Os -std=c++2b -fmodules -fcxx-modules -fobjc-arc -arch arm64 -isysroot $(xcrun --sdk macosx --show-sdk-path) -framework AVFAudio -framework AudioToolbox -framework Foundation fuzzer.mm -o fuzzer
          if [ $? -eq 0 ]; then
            echo "Compilation successful"
            ls -l fuzzer || echo "Compiled binary 'fuzzer' not found"
            BINARY_SIZE=$(stat -f %z fuzzer 2>/dev/null || stat -c %s fuzzer 2>/dev/null)
            echo "Binary size: $BINARY_SIZE bytes"
          else
            echo "Compilation failed"
            exit 1
          fi

      - name: Run encodeme
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Running encodeme at $(date)"
          chmod +x encodeme
          ./encodeme
          if [ $? -eq 0 ]; then
            echo "encodeme executed successfully"
          else
            echo "encodeme execution failed"
            exit 1
          fi

      - name: Convert M4A to MP3
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Converting output.m4a to output.mp3 at $(date)"
          ffmpeg -i output.m4a -c:a mp3 -b:a 128k -ac 1 output.mp3
          if [ $? -eq 0 ]; then
            echo "Conversion successful"
          else
            echo "Conversion failed"
            exit 1
          fi

      - name: Run fuzzer
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Running fuzzer at $(date)"
          chmod +x fuzzer
          timeout 300 ./fuzzer output.m4a 5 > fuzzer.log 2>&1 || true
          if [ $? -eq 0 ]; then
            echo "fuzzer executed successfully"
          else
            echo "fuzzer execution failed or timed out"
            cat fuzzer.log
          fi
          ls -lh fuzzer.log fuzzer_detail.log fuzzer_crash.log 2>/dev/null || echo "One or more log files not found"

      - name: Collect system logs
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Collecting system logs at $(date)"
          if log show --predicate '(subsystem == "com.apple.CrashReporter") OR (eventType == "error" OR eventType == "fault") OR (eventMessage CONTAINS[c] "crash")' --info --error --last 15m > system_fuzzer.log 2>&1; then
            echo "System logs collected successfully"
            ls -lh system_fuzzer.log
          else
            echo "Failed to collect system logs, relying on fuzzer logs"
            echo "System log collection failed at $(date)" > system_fuzzer.log
            ls -lh system_fuzzer.log
          fi
          for log in fuzzer_detail.log fuzzer_crash.log; do
            if [ -f "$log" ]; then
              echo "$log found, size: $(stat -f %z "$log" 2>/dev/null || stat -c %s "$log" 2>/dev/null) bytes"
            else
              echo "$log not found"
            fi
          done

      - name: Collect crash reports
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Collecting crash reports at $(date)"
          mkdir -p crash_reports
          cp -r ~/Library/Logs/DiagnosticReports/*.crash crash_reports/ 2>/dev/null || echo "No crash reports found in ~/Library/Logs/DiagnosticReports"
          cp -r /Library/Logs/DiagnosticReports/*.crash crash_reports/ 2>/dev/null || echo "No crash reports found in /Library/Logs/DiagnosticReports"
          ls -lh crash_reports/ 2>/dev/null || echo "No crash reports copied"

      - name: Verify generated files
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Checking for generated files at $(date)"
          for file in output.m4a output.mp3; do
            if [ -f "$file" ]; then
              FILE_SIZE=$(stat -f %z "$file" 2>/dev/null || stat -c %s "$file")
              echo "$file size: $FILE_SIZE bytes"
              if [ "$FILE_SIZE" -eq 0 ]; then
                echo "Error: $file is 0 bytes"
                exit 1
              fi
              if ! ffprobe -i "$file" -show_format -show_streams -print_format json 2>/dev/null; then
                echo "Error: ffprobe failed for $file"
                exit 1
              fi
            else
              echo "$file not found"
              exit 1
            fi
          done
          echo "Checking for fuzzed files at $(date)"
          ls -lh /tmp/fuzzed_* 2>/dev/null || echo "No fuzzed files found"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audio-and-log-files
          path: |
            AppleTest/apple-positional-audio-codec-invalid-header-main/output.m4a
            AppleTest/apple-positional-audio-codec-invalid-header-main/output.mp3
            AppleTest/apple-positional-audio-codec-invalid-header-main/*.log
            AppleTest/apple-positional-audio-codec-invalid-header-main/crash_reports/*.crash
            /tmp/fuzzed_*.m4a
          retention-days: 7
          if-no-files-found: warn
